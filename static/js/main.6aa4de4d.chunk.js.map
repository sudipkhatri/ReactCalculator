{"version":3,"sources":["Calculator.jsx","reportWebVitals.js","index.js"],"names":["Calculator","useState","cal","setCal","result","setResult","ops","updatecalc","value","includes","slice","eval","toString","createDigits","digits","i","push","onClick","calculate","deleteLast","clearAll","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"84BAIe,SAASA,aACpB,cAAsBC,oDAAS,IAA/B,0JAAOC,IAAP,cAAYC,OAAZ,cACA,WAA4BF,oDAAS,IAArC,2JAAOG,OAAP,cAAeC,UAAf,cAEMC,IAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAE3BC,WAAa,SAAbA,WAAaC,OAEXF,IAAIG,SAASD,QAAkB,KAARN,KACvBI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,IAAIQ,OAAO,MAInDP,OAAOD,IAAMM,OACTF,IAAIG,SAASD,QACbH,UAAUM,KAAKT,IAAMM,OAAOI,cAI9BC,aAAe,WAEjB,IADA,IAAMC,EAAS,GADO,WAEdC,GACJD,EAAOE,KAAK,sEAAQC,QAAS,kBAAIV,WAAWQ,EAAEH,aAAlC,cAAwDG,EAAxD,MAAmDA,KAD3DA,EAAI,EAAGA,EAAE,GAAIA,IAAK,EAAlBA,GAGR,OAAOD,GAELI,UAAY,SAAZA,YACFf,OAAOQ,KAAKT,KAAKU,aAEfO,WAAa,WACf,GAAW,KAARjB,IAAH,CAGA,IAAMM,EAAQN,IAAIQ,MAAM,GAAI,GAC5BP,OAAOK,KAGLY,SAAW,WACbf,UAAU,IACVF,OAAO,KAEX,OACI,kEAAKkB,UAAY,MAAjB,SACI,mEAAKA,UAAW,aAAhB,UACA,mEAAKA,UAAW,UAAhB,UACKjB,OAAS,kFAAQA,OAAR,OAAyB,GAClCF,KAAO,KAEZ,mEAAKmB,UAAU,YAAf,UACI,qEAAQJ,QAAS,kBAAIV,WAAW,MAAhC,iBACA,qEAAQU,QAAS,kBAAIV,WAAW,MAAhC,kBACA,qEAAQU,QAAS,kBAAIV,WAAW,MAAhC,kBACA,qEAAQU,QAAS,kBAAIV,WAAW,MAAhC,iBACA,qEAAQU,QAASE,WAAjB,sBAEJ,mEAAKE,UAAY,SAAjB,UACKR,eACD,qEAAQI,QAAS,kBAAIV,WAAW,MAAhC,iBACA,qEAAQU,QAAS,kBAAIV,WAAW,MAAhC,iBACA,qEAAQU,QAASC,UAAjB,oBAEJ,kEAAKG,UAAU,MAAf,SACA,qEAAQJ,QAASG,SAAjB,6B,gICtDGE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjC,EAAA,EAAD,MAEFkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6aa4de4d.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport './Calc.css'\n\nexport default function Calculator(){\n    const [cal, setCal] = useState(\"\")\n    const [result, setResult] = useState(\"\")\n\n    const ops = ['/', '*', '+', '-', '.']\n\n    const updatecalc = value =>{\n        if(\n            ops.includes(value) && cal === '' ||\n            ops.includes(value) && ops.includes(cal.slice(-1))\n        ){\n            return;\n        }\n        setCal(cal + value)\n        if(!ops.includes(value)){\n            setResult(eval(cal + value).toString());\n        }\n    }\n\n    const createDigits = () =>{\n        const digits = [];\n        for(let i = 1; i<10; i++){\n            digits.push(<button onClick={()=>updatecalc(i.toString())}key={i}> {i} </button>)\n        }\n        return digits;\n    }\n    const calculate = ()=>{\n        setCal(eval(cal).toString());\n    }\n    const deleteLast = () =>{\n        if(cal === ''){\n            return;\n        }\n        const value = cal.slice(0, -1);\n        setCal(value);\n    }\n\n    const clearAll = () =>{\n        setResult(\"\")\n        setCal(\"\")\n    }\n    return (\n        <div className = 'App'>\n            <div className= 'calculator'>\n            <div className= 'display'>\n                {result ? <span> {result} </span>: \"\" }\n                {cal || 0}\n            </div>\n            <div className='operators'>\n                <button onClick={()=>updatecalc('/')}> / </button>\n                <button onClick={()=>updatecalc('*')}> *  </button>\n                <button onClick={()=>updatecalc('+')}>  + </button>\n                <button onClick={()=>updatecalc('-')}> - </button>\n                <button onClick={deleteLast}> DEL </button>\n            </div>\n            <div className = 'digits'>\n                {createDigits()}\n                <button onClick={()=>updatecalc('0')}> 0 </button>\n                <button onClick={()=>updatecalc('.')}> . </button>\n                <button onClick={calculate}> = </button>\n            </div>\n            <div className='row'>\n            <button onClick={clearAll}> Clear</button>\n            </div>\n            </div>\n        </div>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport Calculator from './Calculator';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}